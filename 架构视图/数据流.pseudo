// React待办事项应用 - 数据流动图解

// ========================= 核心数据结构 =========================

// 待办事项结构
TodoItem = {
  id: Number,       // 唯一标识符
  text: String,     // 待办事项内容
  completed: Boolean // 完成状态
}

// 应用状态结构
AppState = {
  todos: [TodoItem],     // 待办事项数组
  filter: 'all' | 'active' | 'completed' // 筛选条件
}

// ========================= 数据流动 =========================

// --------- 初始化流程 ---------
(1) App.初始渲染 -> 
(2) App.useEffect (空依赖数组) -> 
(3) localStorage.getItem('todos') -> 
(4) App.setTodos(解析后的数据) -> 
(5) App.重新渲染，包括子组件

// --------- 添加待办事项流程 ---------
(1) TodoForm.输入改变 -> TodoForm.setInputValue -> TodoForm.重新渲染
(2) TodoForm.提交表单 -> 
(3) TodoForm.调用props.addTodo(输入值) -> 
(4) App.addTodo函数执行 -> 
(5) App.setTodos([...todos, 新项目]) -> 
(6) App.重新渲染 -> 
(7) App.useEffect (todos依赖) -> 
(8) localStorage.setItem('todos', JSON数据) -> 
(9) TodoList.重新渲染 (接收新的todos) -> 
(10) TodoList.渲染新的TodoItem

// --------- 切换待办事项状态流程 ---------
(1) TodoItem.复选框点击 -> 
(2) TodoItem.调用props.toggleTodo(id) -> 
(3) App.toggleTodo函数执行 -> 
(4) App.setTodos(更新后的数组) -> 
(5) App.重新渲染 -> 
(6) App.useEffect (todos依赖) -> 
(7) localStorage.setItem('todos', JSON数据) -> 
(8) TodoList.重新渲染 -> 
(9) TodoItem.重新渲染 (接收更新后的todo)

// --------- 删除待办事项流程 ---------
(1) TodoItem.删除按钮点击 -> 
(2) TodoItem.调用props.deleteTodo(id) -> 
(3) App.deleteTodo函数执行 -> 
(4) App.setTodos(过滤后的数组) -> 
(5) App.重新渲染 -> 
(6) App.useEffect (todos依赖) -> 
(7) localStorage.setItem('todos', JSON数据) -> 
(8) TodoList.重新渲染 (接收更新后的todos) -> 
(9) 删除的TodoItem不再渲染

// --------- 筛选待办事项流程 ---------
(1) TodoFilter.筛选按钮点击 -> 
(2) TodoFilter.调用props.setFilter(新值) -> 
(3) App.setFilter函数执行 -> 
(4) App.重新渲染 -> 
(5) App.filteredTodos重新计算 -> 
(6) TodoList.重新渲染 (接收筛选后的todos) -> 
(7) TodoFilter.重新渲染 (高亮当前选中的筛选条件)


// ========================= 组件Props流动 =========================

// 组件层次结构与Props传递
App {
  └── TodoForm {
        Props接收: { addTodo }
        Props调用: addTodo(text)
      }
  └── TodoFilter {
        Props接收: { filter, setFilter }
        Props调用: setFilter(newFilter)
      }
  └── TodoList {
        Props接收: { todos(经过筛选), toggleTodo, deleteTodo }
        └── TodoItem {
              Props接收: { todo, toggleTodo, deleteTodo }
              Props调用: toggleTodo(id), deleteTodo(id)
            }
      }
}

// ========================= 状态更新规则 =========================

// React状态更新原则
1. 状态更新是异步的 - setState调用后不立即生效
2. 状态更新会触发重新渲染
3. 状态更新会合并 - 多次连续setState可能批处理为一次更新
4. 状态更新是不可变的 - 总是创建新对象/数组而非直接修改

// 本应用中的状态更新模式
App.setTodos(新数组) -> 触发App重新渲染 -> 子组件接收新props -> 子组件重新渲染
App.setFilter(新值) -> 触发App重新渲染 -> filteredTodos重新计算 -> TodoList接收新todos -> TodoList重新渲染
TodoForm.setInputValue(新值) -> 仅触发TodoForm重新渲染，不影响其他组件 